import * as vscode from 'vscode';
import { WasmContext, Memory } from '@vscode/wasm-component-model';

// Import the code generated by wit2ts
import { calculator, Types } from './calculator';

export async function activate(context: vscode.ExtensionContext): Promise<void> {
  console.log("hello in extension");
  // The channel for printing the result.
  const channel = vscode.window.createOutputChannel('Calculator');
  context.subscriptions.push(channel);

  // Load the Wasm module
  const filename = vscode.Uri.joinPath(
    context.extensionUri,
    'target',
    'wasm32-unknown-unknown',
    'debug',
    'wasm_calculator.wasm'
  );
  const bits = await vscode.workspace.fs.readFile(filename);
  const module = await WebAssembly.compile(bits);

   // // Instantiate the module
  const instance = await WebAssembly.instantiate(module, {});

  // The context for the WASM module
  const wasmContext: WasmContext.Default = new WasmContext.Default();

  // Bind the WASM memory to the context
  // wasmContext.initialize(new Memory.Default(instance.exports));

  // // Bind the TypeScript Api
  // const api = calculator._.exports.bind(
  //   instance.exports as calculator._.Exports,
  //   wasmContext
  // );

  context.subscriptions.push(
    vscode.commands.registerCommand('ext2.wasm-component-model.run', () => {
      console.log("hello in command");
      channel.show();
      channel.appendLine('Running calculator example');
      // const add = Types.Operation.Add({ left: 1, right: 2 });
      // channel.appendLine(`Add ${api.calc(add)}`);
      // const sub = Types.Operation.Sub({ left: 10, right: 8 });
      // channel.appendLine(`Sub ${api.calc(sub)}`);
      // const mul = Types.Operation.Mul({ left: 3, right: 7 });
      // channel.appendLine(`Mul ${api.calc(mul)}`);
      // const div = Types.Operation.Div({ left: 10, right: 2 });
      // channel.appendLine(`Div ${api.calc(div)}`);
    })
  );
}

export async function deactivate() {}